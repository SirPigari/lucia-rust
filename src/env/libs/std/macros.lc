// std/macros.lc
// This file contains macros for the Lucia programming language's standard library.
#ifndef LUCIA_STD_MACROS
#define LUCIA_STD_MACROS
#include "./_import.lc"
#include "./assert.lc"

#macro unreachable($msg=("Entered unreachable code")):
    throw $msg from "UnreachableError"
#endmacro

#macro todo($msg=("Not implemented yet")):
    throw $msg from "NotImplemented"
#endmacro

#macro dbg($value...):
    // when a variadic arg in macros is used, the value of it isnt a tuple or a list, its just the values separated by commas
    // its on the macro to decide the type
    // here we use a list (denoted by the [])
    values: list = [$value]
    mutable output: str = ""  // output builder 
    for ((i, n) in values.enumerate()):
        // $!value means the stringified version of the value tokens
        // split by backticks to get the identifiers (backticks aren't used in lucia)
        output += $!`value.split("`")[i].trim() + " = " + _collections.format_value(n).trim() + "\n\r"
    end
    forget values
    print(output, end="")
    null  // otherwise it will return the last value (values)
#endmacro

#macro dbglog($value):
    styledprint($value, fg_color=#config.color_scheme["debug"])
#endmacro

// TODO: Fix apollo time in time module (src/env/libs/time/__init__.rs)
#macro time_it($expr):
    scope time_it_scope (_time): 
        start_time: int = _time.current_apollo_time()
        result: any = ($expr)
        end_time: int = _time.current_apollo_time()
        elapsed: int = end_time - start_time
        return ((result, elapsed))
    end
#endmacro

#macro stringify($value):
    if ($value is str):
        return $value
    else:
        return _collections.format_value($value)
    end
#endmacro

#macro stringify_tokens($tokens):
    return $!tokens
#endmacro

#macro range($a, $b=(null), $step=(1)):
    return _collections.range($a, $b, $step)
#endmacro

// return null
null

#endif