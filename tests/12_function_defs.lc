public static final fun voidFunction() -> void:
    print("This is a void function")
    return  // null
end

public static final fun intFunction() -> int:
    print("This function returns an integer")
    return 42
end

public static final fun stringFunction() -> str:
    print("This function returns a string")
    return ("Hello, World!")
end

public static final fun boolFunction() -> bool:
    print("This function returns a boolean")
    return true
end

public static final fun listFunction() -> list:
    print("This function returns a list of integers")
    return [1, 2, 3, 4, 5]
end

fun test() end  // This is the minimal function.

fun parameterFunction(a: int, b: str) -> void:
    print("This function takes parameters: a =", a, ", b =", b)
end

fun defaultParameterFunction(a: int = 10, b: str = "default") -> void:
    print("This function has default parameters: a =", a.toString(), ", b =", b)
end

fun combinedFunction(a: int, b: str = "default") -> str:
    print("This function combines parameters and returns a string")
    return ("Combined: " + a.toString() + ", " + b.toString())
end

public static final fun recursiveFunction(n: int) -> int:
    if (n <= 1):
        return n
    else:
        return n + recursiveFunction(n - 1)
    end
end

public static final fun higherOrderFunction(func: function[int], value: int) -> int:
    print(func, value)
    print("This function takes another function as a parameter")
    return func(value)
end

private static mutable fun lowerOrderFunction(value: int) -> int:
    print("This is a lower-order function")
    return value * 2
end

voidFunction()
intFunction()
stringFunction()
boolFunction()
listFunction()
parameterFunction(5, "test")
defaultParameterFunction()
combinedFunction(15)
combinedFunction(25, "override")
recursiveResult: int = recursiveFunction(5)
print("Result of recursive function:", recursiveResult)
higherOrderResult: int = higherOrderFunction(lowerOrderFunction, value=10)
print("Result of higher-order function:", higherOrderResult)
