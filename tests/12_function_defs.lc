#include <std/macros>

public static final fun voidFunction() -> void:
    print("This is a void function")
    return  // null
end

public static final fun intFunction() -> int:
    print("This function returns an integer")
    return 42
end

public static final fun stringFunction() -> str:
    print("This function returns a string")
    return ("Hello, World!")
end

public static final fun boolFunction() -> bool:
    print("This function returns a boolean")
    return true
end

public static final fun listFunction() -> list[int]:
    print("This function returns a list of integers")
    return [1, 2, 3, 4, 5]
end

fun test() end  // This is the minimal function.

fun parameterFunction(a: int, b: str) -> void:
    print("This function takes parameters: a =", a, ", b =", b)
end

fun defaultParameterFunction(a: int = 10, b: str = "default") -> void:
    print("This function has default parameters: a =", a.to_string(), ", b =", b)
end

fun combinedFunction(a: int, b: str = "default") -> str:
    print("This function combines parameters and returns a string")
    return ("Combined: " + a.to_string() + ", " + b.to_string())
end

public static final fun recursiveFunction(n: int) -> int:
    if (n <= 1):
        return n
    else:
        return n + recursiveFunction(n - 1)
    end
end

public static final fun higherOrderFunction(func: function[int] -> int, value: int) -> int:
    print(func, value)
    print("This function takes another function as a parameter")
    return func(value)
end

private static mutable fun lowerOrderFunction(value: int) -> int:
    print("This is a lower-order function")
    return value * 2
end

public static final fun mutableArgumentsFunction(mutable a: int, b: str) -> int:
    print("This function takes mutable arguments")
    print("a =", a, ", b =", b)
    a += 5
    print("After modification, a =", a)
    return a
end

// === Assertions ===

voidFunction()
assert_eq!(intFunction(), 42)
assert_eq!(stringFunction(), "Hello, World!")
assert_eq!(boolFunction(), true)
assert_eq!(listFunction(), ([1, 2, 3, 4, 5]))
parameterFunction(5, "test")
defaultParameterFunction()
assert_eq!(combinedFunction(15), "Combined: 15, default")
assert_eq!(combinedFunction(25, "override"), "Combined: 25, override")
assert_eq!(recursiveFunction(5), 15)
assert_eq!(recursiveFunction(0), 0)
assert_eq!(recursiveFunction(1), 1)
assert_eq!(higherOrderFunction(lowerOrderFunction, 10), 20)
assert_eq!(mutableArgumentsFunction(10, "test"), 15)
