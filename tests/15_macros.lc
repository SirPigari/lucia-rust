#include <std/macros>

#macro hello($name):
    // f-strings wont work here you would need to assign $name to a variable first
    // print("Hello, " + $name + "!")
    // muahahah they work now
    print(f"Hello, $name$!")
#endmacro


hello!("Lucia")

assert!(1 + 1 == 2)
assert!(!false)
assert_eq!(2 * 2, 4)

try:
    todo!("This feature is not implemented yet")
catch (e):
    dbg!(e)
end

assert_err!(1 / 0)

dbg!(10 + 10)
dbglog!("This is a debug log message")

dbg!(1, 2, 3, "Hello", 4.5)

i: int = 42
#macro mangling_test($a):
    i: int = $a
    dbg!(i)
    assert_eq!(i, 100)
#endmacro
mangling_test!(100)
assert_eq!(i, 42)

assert_type!(i, int)

assert_err!(assert_type!(i, str, "Expected i to be a string"))

// time_it macro runs the code and then returns a tuple with the result and the elapsed time in apollo time
// this macro is in development and may not work as expected
// this is just test if macros can run complex code inside them
(_, elapsed: int) = time_it!(
    for (i in [0..69]):
        i * i
    end
)
formatted_time: float = _time.format_apollo_time_ms(elapsed)

print(formatted_time, elapsed)

#macro #no-mangle m!():
    h = 100
#endmacro

h := 6969
m!()

assert_eq!(h, 100)

#macro #no-group g!():
    f: function = () => (42)
    f
#endmacro

assert_eq!(\
g!()

()  // this calls f
\, 42)

// deprecated macro example
// does the same as warn inside the macro
#macro #deprecated("This macro is deprecated") deprecated_macro():
    print("This macro is deprecated")
#endmacro

deprecated_macro!()

// this macro uses [] for brackets
// you can use () [] {} and <> for bracket type in macros
#macro vec![$els...]:
    [$els]
#endmacro

v: list = vec![1, 2, 3, 4, 5]
assert_eq!(v, ([1, 2, 3, 4, 5]))

// this still works, both macros have same name but different brackets
#macro vec!($el):
    [$el]
#endmacro

v_single: list = vec![1]
assert_eq!(v_single, ([1]))

#macro is_ident($token):
    // similar to $!, $? doesnt return a list nor a tuple its on the macro to decide the type
    // if foo is passed in the tokens are: [("IDENTIFIER", "foo")]
    tokens: list = [$?token]
    if len(tokens) == 1:
        return tokens[0][0] == "IDENTIFIER"
    else:
        // must be in else because its a macro not a function
        return false
    end
#endmacro

assert_eq!(is_ident!(foo), true)
assert_eq!(is_ident!(123), false)
assert_eq!(is_ident!(foo bar), false)  // its 2 idents not one so its not an ident
