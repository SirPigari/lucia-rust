#include <std/assert>
import math

fun create_number(base: int | float, exponent: int | float) -> float:
    return (base ^ exponent) as float
end

fun nth_root(value: float, n: int) -> float:
    return value ^ (1.0 / n)
end

// tests for create_number
assert_eq!(1e50, create_number(10, 50))
assert_eq!(1e-50, create_number(10, -50))
assert_eq!(2.5e3, 2500)
assert_eq!(3.14E-2, 0.0314)

// tests for nth_root
assert_approx_eq!(nth_root(27.0, 3), 3.0)
assert_approx_eq!(nth_root(16.0, 4), 2.0)

// hexadecimal notation
assert_eq!(0x1A, 26)
assert_eq!(0xFF, 255)
assert_eq!(0x1A + 0x2B, 69)
assert_eq!(0X1A - 0X0F, 11)

// octal notation
assert_eq!(0o12, 10)
assert_eq!(0o17, 15)
assert_eq!(0o12 + 0o34, 38)
assert_eq!(0O12 - 0O10, 2)

// binary notation
assert_eq!(0b1010, 10)
assert_eq!(0b1111, 15)
assert_eq!(0b1010 + 0b1100, 22)
assert_eq!(0B1010 - 0B0101, 5)

// custom base notation
assert_eq!(2#1010, 10) // base 2
assert_eq!(16#1a, 26) // base 16
assert_eq!(36#z, 35) // base 36
assert_eq!(62#10, 62) // base 62
assert_eq!(1#1, 1) // base 1
assert_eq!(62#i_can_put_anything_here, 3334511810847886609099271355119208) // base 62 with alphanumeric characters

// decimal notation without leading zero
assert_eq!(.69, 0.69)
assert_eq!(.123_456, 0.123456)

// recurring decimal
assert_eq!(0.4(9), 0.5)
assert_eq!((1/3 + 1), 1.(3))
assert_eq!(0.(9), 1.0)
assert_eq!(1/3*3, 1.0)

assert_eq!(2(3), 6)  // 2 * 3, its an int not an float so its a multiplication

// complex numbers
assert_eq!(1i, complex(0, 1))
assert_eq!(3 + 4i, complex(3, 4))
assert_eq!(0 + 0i, complex(0, 0))
assert_eq!(-5 + 2i, complex(-5, 2))
assert_eq!(7 - 3i, complex(7, -3))
assert_eq!(-2 - 6i, complex(-2, -6))

assert_eq!(1 + 2i + 3 + 4i, 4 + 6i)
assert_eq!(3 + 5i + -1 + 2i, 2 + 7i)

assert_eq!(4 + 5i - 1 + 2i, 3 + 7i)
assert_eq!(3 + 3i - 3 + 3i, 6i)

assert_eq!((1 + 2i) * (3 + 4i), -5 + 10i)
assert_eq!((2 - 3i) * (1 + 1i), 5 - 1i)

assert_approx_eq!((3 + 2i) / (1 - 1i), 0.5 + 2.5i)
assert_eq!((1 + 1i) / (1 + 1i), 1 + 0i)

assert_approx_eq!(|3 + 4i|, 5.0)
assert_approx_eq!(|1 - 1i|, math.sqrt(2))

assert_eq!(math.conj(3 + 4i), 3 - 4i)
assert_eq!(math.conj(1 - 2i), 1 + 2i)

assert_eq!(3 * (2 + 5i), 6 + 15i)
assert_eq!((2 + 5i) * 3, 6 + 15i)
assert_eq!(10 + (2 + 3i), 12 + 3i)
assert_eq!((2 + 3i) + 10, 12 + 3i)

assert_eq!(complex(3, 4), 3 + 4i)
assert_eq!(complex(-2, 5), -2 + 5i)
assert_eq!(complex(0, -1), -1i)

assert_approx_eq!(math.sqrt(4 + 0i), 2 + 0i)
assert_approx_eq!(math.sqrt(0 + 4i), 1.41421356237 + 1.41421356237i) // approximate
