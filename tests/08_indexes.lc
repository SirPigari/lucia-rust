#include <std/macros>

l: list = [0..10].collect()
m: str = "i love lucia"  // its not what you think i swear

// simple indexing
assert_eq!(l[0], 0)
assert_eq!(m[2], 'l')

// negative indexing
assert_eq!(l[-1], 10)
assert_eq!(m[-1], 'a')

// slicing with start and end
assert_eq!((l[2..5]), ([2, 3, 4]))
assert_eq!(m[2..6], "love")

// slicing with only start
assert_eq!((l[5..]), ([5, 6, 7, 8, 9, 10]))
assert_eq!(m[7..], "lucia")

// slicing with only end
assert_eq!((l[..3]), ([0, 1, 2]))
assert_eq!(m[..4], "i lo")

// full slice
assert_eq!((l[..]), ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))
assert_eq!(m[..], "i love lucia")

// index assignment
l[0] = 42
m[0] = 'I'

assert_eq!(l[0], 42)
assert_eq!(m[0], 'I')
