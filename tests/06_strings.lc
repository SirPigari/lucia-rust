#include <std/macros>

a: str = "hello"

// f-strings
assert_eq!(f"variable 'a' is {a}", "variable 'a' is hello")

// raw strings
b: str = r"\"

// bytes
c: bytes = b"hello"

// assertions to verify values
assert_eq!(a, "hello")
assert_eq!(b, "\\")
assert_eq!(c, "hello".to_bytes())
assert_eq!(f"variable 'a' is {a}", "variable 'a' is hello")

// f-string formats

// integers
num: int = 42
assert_eq!(f"{num :: b}", "101010")
assert_eq!(f"{num :: o}", "52")
assert_eq!(f"{num :: x}", "2a")
assert_eq!(f"{num :: X}", "2A")

// floats with precision
pi: float = 3.14159
assert_eq!(f"{pi :: .2f}", "3.14")
assert_eq!(f"{pi :: .3e}", "3.142e0")

// string case formatting
s: str = "Lucia"
assert_eq!(f"{s :: u}", "LUCIA")
assert_eq!(f"{s :: l}", "lucia")

// width, alignment, fill
str1: str = "hi"
assert_eq!(f"{str1 :: >5}", "   hi")       // right-align
assert_eq!(f"{str1 :: <5}", "hi   ")       // left-align
assert_eq!(f"{str1 :: ^5}", " hi  ")       // center-align
assert_eq!(f"{str1 :: *^7}", "**hi***")   // custom fill + center

// precision error when type not float
num2: int = 7
assert_err!(f"{num2 :: .2}")  // should error because .2 without float type

// combined f-string with width and hex
val: int = 7
assert_eq!(f"The number {val :: <3} in hex is {val :: x}", "The number 7   in hex is 7")