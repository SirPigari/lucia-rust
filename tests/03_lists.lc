#include <std/assert>

// idk if .. should be here its really a generator not a list but ill keep it
assert_eq!(([1, 2, 3]),                   ([1, 2, 3]))                                                          // just a list
assert_eq!(([1..10].collect()),           ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))                                    // inclusive range
assert_eq!(([2, 4..20].collect()),        ([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))                               // inclusive range with step

assert_eq!(([1, 1, 2, 6...120]),          ([1, 1, 2, 6, 24, 120]))                                              // factorial partial
assert_eq!(([2, 6, 12...30]),             ([2, 6, 12, 20, 30]))                                                 // quadratic (2nd diff constant)
assert_eq!(([1, 3, 9, 27...243]),         ([1, 3, 9, 27, 81, 243]))                                             // geometric (×3)
assert_eq!(([1, 4, 10, 20...35]),         ([1, 4, 10, 20, 35]))                                                 // 3rd-degree poly partial sums
assert_eq!(([0, 2, 4, 6...10]),           ([0, 2, 4, 6, 8, 10]))                                                // linear +2
assert_eq!(([10, 8, 6, 4...0]),           ([10, 8, 6, 4, 2, 0]))                                                // linear -2
assert_eq!(([1, 1, 2, 3, 5, 8...55]),     ([1, 1, 2, 3, 5, 8, 13, 21, 34, 55]))                                 // fibonacci
assert_eq!(([2, 5, 10, 17...50]),         ([2, 5, 10, 17, 26, 37, 50]))                                         // quadratic pattern
assert_eq!(([7...12]),                    ([7, 8, 9, 10, 11, 12]))                                              // simple ascending
assert_eq!(([12...7]),                    ([12, 11, 10, 9, 8, 7]))                                              // simple descending
assert_eq!(([0, 1, 1, 2, 3, 5, 8...34]),  ([0, 1, 1, 2, 3, 5, 8, 13, 21, 34]))                                  // fibonacci (long)
assert_eq!(([1, 8, 27, 64...216]),        ([1, 8, 27, 64, 125, 216]))                                           // cubic numbers (n³)
assert_eq!(([1, -1, 1, -1...1]),          ([1, -1, 1, -1, 1]))                                                  // alternating signs
assert_eq!(([3, -3, 3, -3...; 8]),        ([3, -3, 3, -3, 3, -3, 3, -3]))                                       // alternating signs (long)
assert_eq!(([7, 15, 37, 42, 137...; 10]), ([7, 15, 37, 42, 137, 567, 1715, 4102, 8387, 15367]))                 // polynomial pattern (7x^9 + 8x^8 + 14x^7 - 31x^6 + 138x^5)

assert_eq!(([0, 1, 1, 2...; 50]), 
          ([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 
            6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 
            1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 
            102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 
            2971215073, 4807526976, 7778742049]))
assert_err!(([1, 1, 2..; 10])) // RangeError: Seed values do not have consistent step
assert_err!(([69, 420, 80085, 5318008...; 200])) // PatternError: Sequence value overflowed f64 limit
assert_err!(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10...; 5])) // ValueError: Length must be greater than or equal to seed length

// List comprehensions
copy_everything: list[int] = [x for x in [1..10]]
assert_eq!(copy_everything, ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

double_everything: list[int] = [x * 2 for x in [1..10]]
assert_eq!(double_everything, ([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))

squared_evens: list[int] = [x^2 for x in [1..10] if x % 2 == 0]
assert_eq!(squared_evens, ([4, 16, 36, 64, 100]))

mutliple_ifs: list[int] = [x for x in [1..30] if x % 2 == 0 if x % 3 == 0 if x % 5 == 0]
assert_eq!(mutliple_ifs, ([30]))

pairs: list[list[int]] = [[x, y] for x in [1..3] if x != 2 for y in [4..6] if x + y > 7]
assert_eq!(pairs, ([[3, 5], [3, 6]]))

nested_loops: list[list[int]] = [[x, y] for x in [1..3] for y in [4..6]]
assert_eq!(nested_loops, ([[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]))

nested_loops: list[list[int]] = [[x * 2, y * 2] for (x, y) in [(x, y) for x in [1..3] for y in [4..6]]]
assert_eq!(nested_loops, ([[2, 8], [2, 10], [2, 12], [4, 8], [4, 10], [4, 12], [6, 8], [6, 10], [6, 12]]))

// man dont ask me
multi_out: list[int] = [v for pair in [(x, y) for x in [1..3] for y in [4..6]] for v in [pair[0]*2, pair[1]*2]]
assert_eq!(multi_out, ([2, 8, 2, 10, 2, 12, 4, 8, 4, 10, 4, 12, 6, 8, 6, 10, 6, 12]))
