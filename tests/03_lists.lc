#include <std/macros>

assert_eq!(([1, 2, 3]),                   ([1, 2, 3]))                                                          // just a list
assert_eq!(([1..10]),                     ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))                                    // inclusive range
assert_eq!(([2, 4..20]),                  ([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))                               // inclusive range with step

assert_eq!(([1, 1, 2, 6...120]),          ([1, 1, 2, 6, 24, 120]))                                              // factorial partial
assert_eq!(([2, 6, 12...30]),             ([2, 6, 12, 20, 30]))                                                 // quadratic (2nd diff constant)
assert_eq!(([1, 3, 9, 27...243]),         ([1, 3, 9, 27, 81, 243]))                                             // geometric (×3)
assert_eq!(([1, 4, 10, 20...35]),         ([1, 4, 10, 20, 35]))                                                 // 3rd-degree poly partial sums
assert_eq!(([0, 2, 4, 6...10]),           ([0, 2, 4, 6, 8, 10]))                                                // linear +2
assert_eq!(([10, 8, 6, 4...0]),           ([10, 8, 6, 4, 2, 0]))                                                // linear -2
assert_eq!(([1, 1, 2, 3, 5, 8...55]),     ([1, 1, 2, 3, 5, 8, 13, 21, 34, 55]))                                 // fibonacci
assert_eq!(([2, 5, 10, 17...50]),         ([2, 5, 10, 17, 26, 37, 50]))                                         // quadratic pattern
assert_eq!(([7...12]),                    ([7, 8, 9, 10, 11, 12]))                                              // simple ascending
assert_eq!(([12...7]),                    ([12, 11, 10, 9, 8, 7]))                                              // simple descending
assert_eq!(([0, 1, 1, 2, 3, 5, 8...34]),  ([0, 1, 1, 2, 3, 5, 8, 13, 21, 34]))                                  // fibonacci (long)
assert_eq!(([1, 8, 27, 64...216]),        ([1, 8, 27, 64, 125, 216]))                                           // cubic numbers (n³)

print("Test completed successfully")
