#include <std/assert>

// https://www.youtube.com/watch?v=ctkpsRAxUSE

a: list[int] = [0..5].collect()
assert_eq!(a, ([0, 1, 2, 3, 4, 5]))


forget a[2..4]
assert_eq!(a, ([0, 1, 4, 5]))

forget a

assert_err!(a)

try:
    throw "This should throw an error" from "ExpectedError"
catch (e):
    assert_eq!(e, (("ExpectedError", "This should throw an error")))
end

try:
    0 / 0
end

try:
    0 / 0
end catch (err_type, err_msg):
    assert_eq!(err_type, "ZeroDivisionError")
end

try:
    i = 10
end catch (err_type, err_msg, err_help):
    assert_eq!(err_type, "NameError")
end

// ? operator
// name()? means the function may fail (doesnt do anything its just a syntax hint)
fun may_fail()? -> int:
    throw "lol failed"
end

// ? suppresses the error and returns null
assert!(may_fail()? is void)
assert_eq!(may_fail()?, null)

// ? with a default value
assert_eq!(may_fail()? or 42, 42)
// OR you can use ??
// but it looks like the code is confused
assert_eq!(may_fail()?? 137, 137)

// (you can chain them)
assert_eq!((69??????????????????????????????????????????????????), 69)
// maybe dont do that
// kristof

// also, throw takes a iterable of 1 to 3 elements
try:
    throw ("OnlyMessage")
catch (err_type, err_msg):
    assert_eq!(err_type, "LuciaError")  // default type
    assert_eq!(err_msg, "OnlyMessage")
end

try:
    throw ("TypeError", "OnlyTypeAndMessage")
catch (err_type, err_msg):
    assert_eq!(err_type, "TypeError")
    assert_eq!(err_msg, "OnlyTypeAndMessage")
end

try:
    throw ("CustomError", "This is a custom error message", "Here is some help text")
catch (err_type, err_msg, err_help):
    assert_eq!(err_type, "CustomError")
    assert_eq!(err_msg, "This is a custom error message")
    assert_eq!(err_help, "Here is some help text")
end

try:
    1 / 0
catch (err): end

try:
    // must be in ()
    throw (err)
catch (err_type, err_msg):
    assert_eq!(err_type, "ZeroDivisionError")
    assert_eq!(err_msg, "Division by zero.")
end
