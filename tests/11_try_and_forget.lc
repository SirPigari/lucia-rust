#include <std/macros>

a: list[int] = [0..5].collect()
assert_eq!(a, ([0, 1, 2, 3, 4, 5]))


forget a[2..4]
assert_eq!(a, ([0, 1, 4, 5]))

forget a

assert_err!(a)

try:
    throw "This should throw an error" from "ExpectedError"
catch (e):
    assert_eq!(e, (("ExpectedError", "This should throw an error")))
end

try:
    0 / 0
end

try:
    0 / 0
end catch (err_type, err_msg):
    assert_eq!(err_type, "ZeroDivisionError")
end

try:
    i = 10
end catch (err_type, err_msg, err_help):
    assert_eq!(err_type, "NameError")
end

// ? operator
// name()? means the function may fail (doesnt do anything its just a syntax hint)
fun may_fail()? -> int:
    throw "lol failed"
end

// ? suppresses the error and returns null
assert!(may_fail()? is void)
assert_eq!(may_fail()?, null)

// ? with a default value
assert_eq!(may_fail()? or 42, 42)
// OR you can use ??
// but it looks like the code is confused
assert_eq!(may_fail()?? 137, 137)

// (you can chain them)
assert_eq!(69??????????????????????????????????????????????????, 69)
// maybe dont do that
// kristof will probably like this
